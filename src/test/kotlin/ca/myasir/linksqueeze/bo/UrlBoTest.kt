package ca.myasir.linksqueeze.bo

import ca.myasir.linksqueeze.dao.ShortenedUrlDao
import ca.myasir.linksqueeze.model.ShortenedUrl
import ca.myasir.linksqueeze.service.HashService
import ca.myasir.linksqueeze.test_util.TestDefaults.TEST_HASH_ID
import ca.myasir.linksqueeze.test_util.TestDefaults.TEST_EXPIRY
import ca.myasir.linksqueeze.test_util.TestDefaults.TEST_URL
import ca.myasir.linksqueeze.test_util.TestDefaults.TEST_USER_ID
import ca.myasir.linksqueeze.test_util.TestDefaults.createSampleShortenedUrl
import io.mockk.*
import org.junit.jupiter.api.Assertions.*
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test

internal class UrlBoTest {

    private val mockedShortenedUrlDao: ShortenedUrlDao = mockk()
    private val mockedHashService: HashService = mockk()
    private val bo = UrlBo(mockedHashService, mockedShortenedUrlDao)

    @BeforeEach
    fun setup() {
        clearAllMocks()
    }

    @Test
    fun `it should create a url hash id with the given user id, insert into db, and return the hash`() {
        val shortenedUrl = createSampleShortenedUrl()

        every { mockedHashService.createUniqueHash(TEST_URL) } returns TEST_HASH_ID
        justRun { mockedShortenedUrlDao.add(shortenedUrl) }

        val actualHashId = bo.createShortenedUrl(TEST_URL, TEST_USER_ID, TEST_EXPIRY)

        assertEquals(TEST_HASH_ID, actualHashId)
        verify(exactly = 1) {
            mockedShortenedUrlDao.add(shortenedUrl)
        }
    }

    @Test
    fun `it should create a url hash id with no user, insert into db, and return the hash`() {
        val shortenedUrl = createSampleShortenedUrl(userId = null)

        every { mockedHashService.createUniqueHash(TEST_URL) } returns TEST_HASH_ID
        justRun { mockedShortenedUrlDao.add(shortenedUrl) }

        val actualHashId = bo.createShortenedUrl(TEST_URL, null, TEST_EXPIRY)

        assertEquals(TEST_HASH_ID, actualHashId)
        verify(exactly = 1) {
            mockedShortenedUrlDao.add(shortenedUrl)
        }
    }

    @Test
    fun `it should create a url hash id no expiry, insert into db, and return the hash`() {
        val shortenedUrl = createSampleShortenedUrl(userId = null, expiryDate = null)

        every { mockedHashService.createUniqueHash(TEST_URL) } returns TEST_HASH_ID
        justRun { mockedShortenedUrlDao.add(shortenedUrl) }

        val actualHashId = bo.createShortenedUrl(TEST_URL, null, null)

        assertEquals(TEST_HASH_ID, actualHashId)
        verify(exactly = 1) {
            mockedShortenedUrlDao.add(shortenedUrl)
        }
    }

    @Test
    fun `it should fetch the url for the given hash`() {
        val expected = createSampleShortenedUrl()

        every { mockedShortenedUrlDao.get(TEST_HASH_ID) } returns expected

        val actual = bo.getUrl(TEST_HASH_ID)

        assertEquals(expected, actual)
    }

    @Test
    fun `it should return a list of saved urls generated by the given user id`() {
        val expected = listOf(createSampleShortenedUrl())

        every { mockedShortenedUrlDao.getByUser(TEST_USER_ID) } returns expected

        val actual = bo.getUserSavedUrls(TEST_USER_ID)

        assertEquals(expected, actual)
    }

    @Test
    fun `it should call dao to delete a record with the given url hash`() {
        justRun { mockedShortenedUrlDao.delete(TEST_HASH_ID, TEST_USER_ID) }

        bo.deleteUrl(TEST_HASH_ID, TEST_USER_ID)

        verify(exactly = 1) {
            mockedShortenedUrlDao.delete(TEST_HASH_ID, TEST_USER_ID)
        }
    }
}
