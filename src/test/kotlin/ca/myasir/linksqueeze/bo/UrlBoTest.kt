package ca.myasir.linksqueeze.bo

import ca.myasir.linksqueeze.dao.MetricType
import ca.myasir.linksqueeze.dao.ShortenedUrlDao
import ca.myasir.linksqueeze.dao.UrlMetricsDao
import ca.myasir.linksqueeze.model.UrlMetric
import ca.myasir.linksqueeze.service.HashService
import ca.myasir.linksqueeze.test_util.TestDefaults.TEST_EXPIRY
import ca.myasir.linksqueeze.test_util.TestDefaults.TEST_URL
import ca.myasir.linksqueeze.test_util.TestDefaults.TEST_URL_HASH
import ca.myasir.linksqueeze.test_util.TestDefaults.TEST_USER_ID
import ca.myasir.linksqueeze.test_util.TestDefaults.createSampleShortenedUrl
import ca.myasir.linksqueeze.test_util.TestDefaults.createSampleUrlMetric
import io.mockk.*
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import java.time.ZonedDateTime

internal class UrlBoTest {

    private val mockedShortenedUrlDao: ShortenedUrlDao = mockk()
    private val mockedUrlMetricsDao: UrlMetricsDao = mockk()
    private val mockedHashService: HashService = mockk()
    private val bo = UrlBo(mockedHashService, mockedShortenedUrlDao, mockedUrlMetricsDao)

    @BeforeEach
    fun setup() {
        clearAllMocks()
    }

    @Test
    fun `it should create a url hash id with the given user id, insert into db, and return the hash`() {
        val expected = createSampleShortenedUrl()

        every { mockedHashService.createUniqueHash(TEST_URL) } returns TEST_URL_HASH
        justRun { mockedShortenedUrlDao.add(expected) }

        val actual = bo.createShortenedUrl(TEST_URL, TEST_USER_ID, TEST_EXPIRY)

        assertEquals(expected, actual)
        verify(exactly = 1) {
            mockedShortenedUrlDao.add(expected)
        }
    }

    @Test
    fun `it should create a url hash id with no user, insert into db, and return the hash`() {
        val expected = createSampleShortenedUrl(userId = null)

        every { mockedHashService.createUniqueHash(TEST_URL) } returns TEST_URL_HASH
        justRun { mockedShortenedUrlDao.add(expected) }

        val actual = bo.createShortenedUrl(TEST_URL, null, TEST_EXPIRY)

        assertEquals(expected, actual)
        verify(exactly = 1) {
            mockedShortenedUrlDao.add(expected)
        }
    }

    @Test
    fun `it should create a url hash id no expiry, insert into db, and return the hash`() {
        val expected = createSampleShortenedUrl(userId = null, expiryDate = null)

        every { mockedHashService.createUniqueHash(TEST_URL) } returns TEST_URL_HASH
        justRun { mockedShortenedUrlDao.add(expected) }

        val actual = bo.createShortenedUrl(TEST_URL, null, null)

        assertEquals(expected, actual)
        verify(exactly = 1) {
            mockedShortenedUrlDao.add(expected)
        }
    }

    @Test
    fun `it should fetch the url for the given hash and add metric count`() {
        val date = ZonedDateTime.now()
        val expected = createSampleShortenedUrl()
        val metric = UrlMetric(TEST_URL_HASH, MetricType.COUNT, 1.0, date)

        mockkStatic(ZonedDateTime::class)
        every { ZonedDateTime.now() } returns date
        every { mockedShortenedUrlDao.get(TEST_URL_HASH) } returns expected
        justRun { mockedUrlMetricsDao.addMetric(metric) }

        val actual = bo.getUrl(TEST_URL_HASH)

        assertEquals(expected, actual)
        verify(exactly = 1) {
            mockedShortenedUrlDao.get(TEST_URL_HASH)
            mockedUrlMetricsDao.addMetric(metric)
        }
    }

    @Test
    fun `it should fetch the url for the given hash and not add metric count if url was not found`() {
        val date = ZonedDateTime.now()
        val metric = UrlMetric(TEST_URL_HASH, MetricType.COUNT, 1.0, date)

        mockkStatic(ZonedDateTime::class)
        every { ZonedDateTime.now() } returns date
        every { mockedShortenedUrlDao.get(TEST_URL_HASH) } returns null

        bo.getUrl(TEST_URL_HASH)

        verify(exactly = 1) {
            mockedShortenedUrlDao.get(TEST_URL_HASH)
        }
        verify(exactly = 0) {
            mockedUrlMetricsDao.addMetric(metric)
        }
    }

    @Test
    fun `it should return a list of saved urls generated by the given user id`() {
        val expected = listOf(createSampleShortenedUrl())

        every { mockedShortenedUrlDao.getByUser(TEST_USER_ID) } returns expected

        val actual = bo.getUserSavedUrls(TEST_USER_ID)

        assertEquals(expected, actual)
    }

    @Test
    fun `it should call dao to delete a record with the given url hash`() {
        justRun { mockedShortenedUrlDao.delete(TEST_URL_HASH, TEST_USER_ID) }

        bo.deleteUrl(TEST_URL_HASH, TEST_USER_ID)

        verify(exactly = 1) {
            mockedShortenedUrlDao.delete(TEST_URL_HASH, TEST_USER_ID)
        }
    }

    @Test
    fun `it should return URL metrics for the given hash id`() {
        val expected = listOf(createSampleUrlMetric())

        every { mockedUrlMetricsDao.getMetrics(TEST_URL_HASH) } returns expected

        val actual = bo.getUrlMetrics(TEST_URL_HASH)

        assertEquals(expected, actual)
    }
}
